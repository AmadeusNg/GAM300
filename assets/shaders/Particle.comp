#version 450

struct Particle {
    vec3 OriginalPosition;// constant transform position of the entity, position of particle is an offset from here based on velocity and acceleration
    vec3 Velocity;
    vec3 Acceleration;
    vec3 DecayRate;
    vec3 Size;//xyz scale of the particle
    vec3 Color;
    float Lifetime;//how long is the particle supposed to last
    float Age;//how long has the particle been active
    int type; // integer indicating the particle mesh to be used
};

layout(std140, binding =1 ) readonly buffer ActiveParticle{
    Particle particle[];
}v_ActiveParticleIn;

//vector of matrix to be sent to vertex buffer
layout(std140, binding =2 ) writeonly buffer ActiveParticle{
    mat4 transformlist[];
}v_ActiveParticleOut;

layout(push_constant) uniform Push{
    float deltaTime;
}push;


void main() {
    // Particle update loop
    uint particleindex = gl_GlobalInvocationID.x;

    //check if invocation id within the particlevectorIn
    if (particleindex < v_ActiveParticleIn.particle.length() ){
        Particle currentparticle = v_ActiveParticleIn.particles[particleindex];

        currentparticle.Age += push.deltaTime;
        vec3 newposition;
        if (currentparticle.Age >= currentparticle.Lifetime){
            //current particle exceeded lifetime, reset age and position
            currentparticle.Age = 0.0;
            newposition = currentparticle.OriginalPosition; 
        }else{
            vec3 accel = currentparticle.Acceleration * exp(-currentparticle.DecayRate * push.deltaTime);
            vec3 velocity = currentparticle.Velocity + currentparticle.Acceleration * push.deltaTime;
            newposition = velocity * deltaTime;
        }

    }
}
